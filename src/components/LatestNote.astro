---
export const prerender = false;
import type { NostrEvent } from "@/lib/utils";
import { getNevent, formatDateNostr, formatContent } from "@/lib/utils";
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import Link from "@/components/Link.astro";
import { Button } from "@/components/ui/button";
import { Icon } from "astro-icon/components";

const baseUrl = "https://abeng.xyz";

let latestNote: NostrEvent | null = null;
let errorMessage: string | null = null;
let formatDate: string | null = null;

try {
  const response = await fetch(`${baseUrl}/api/fetch-nostr-note`);
  if (response.ok) {
    const data = await response.json();
    latestNote = data.latestNote;
    formatDate = formatDateNostr(data.latestNote.created_at);
  } else {
    errorMessage = "Failed to fetch the latest note. API returned an error.";
  }
} catch (error) {
  errorMessage = "Failed to fetch the latest note. Please try again later.";
}
---

<div>
  {latestNote ? (
    <Card>
      <CardHeader>
        <CardTitle className="font-bold flex flex-wrap items-center -mb-4 -mt-3">
          <Icon name="nostr" class="size-16 -ml-5" /> Latest nostr note:
        </CardTitle>
      </CardHeader>
      <CardContent>
  {latestNote?.content.split("\n").map((line, index) => {
    const urlRegex = /(https?:\/\/[^\s]+)/g; // Regex untuk mendeteksi URL
    const allowedTags = ["bitcoin", "nostr"]; // Hashtag yang diizinkan

    // Jika baris mengandung URL atau hashtag
    return (
      <p key={index} class="block mb-2">
        {line.split(urlRegex).map((part, i) => {
          if (urlRegex.test(part)) {
            // Deteksi URL
            const shortenedUrl = part.length > 30 ? `${part.slice(0, 30)}...` : part;

            if (part.match(/\.(jpg|jpeg|png|gif)$/i)) {
              // Jika URL adalah gambar
              return (
                <img
                  key={i}
                  src={part}
                  alt="Embedded Image from nostr"
                  class="w-full rounded-md mt-2"
                />
              );
            }

            // Jika URL bukan gambar
            return (
              <a
                key={i}
                href={part}
                target="_blank"
                rel="noopener noreferrer"
                class="text-blue-600 underline"
              >
                {shortenedUrl}
              </a>
            );
          }

          // Deteksi Hashtag
          if (part.includes("#")) {
            return part.split(/(#\w+)/g).map((subPart, j) => {
              if (subPart.startsWith("#")) {
                const tag = subPart.slice(1).toLowerCase(); // Ambil tag tanpa '#'
                if (allowedTags.includes(tag)) {
                  // Jika tag termasuk yang diizinkan
                  return (
                    <a
                      key={`${i}-${j}`}
                      href={`/tags/${tag}`}
                      class="text-blue-600"
                    >
                      {subPart}
                    </a>
                  );
                }
              }

              // Tampilkan teks biasa jika bukan hashtag yang diizinkan
              return <span key={`${i}-${j}`}>{subPart}</span>;
            });
          }

          // Jika teks biasa
          return <span key={i}>{part}</span>;
        })}
      </p>
    );
  })}
</CardContent>
      <CardFooter>
        <span class="text-xs text-muted-foreground mr-2">{formatDate}</span>
        <Link
          href={`https://zapper.nostrapps.org/zap?id=${getNevent(latestNote.id)}&type=zap`}
          external
        >
          <Button variant="ghost">&#x26A1; Zap</Button>
        </Link>
        <Link href={`https://nostr.band/${getNevent(latestNote.id)}`} external>
          <Button variant="ghost">Open&#10139;</Button>
        </Link>
      </CardFooter>
    </Card>
  ) : (
    <p>{errorMessage || "No latest note available."}</p>
  )}
</div>